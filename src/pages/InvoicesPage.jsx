import React, { useEffect, useState } from 'react';
import styled from 'styled-components';
import { MainLayout } from '../layouts/MainLayout';
import InstructionsTable from '../components/InstructionsTable';
import { API_ENDPOINTS } from '../constants/api';
import axios from 'axios';

const InvoicesPage = () => {
    const [filteredData, setFilteredData] = useState([]);

    const columns = [
        { key: 'invoice_number', header: 'Invoice no.' },
        { key: 'title', header: 'Title' },
        { key: 'price', header: 'Amount' },
        { key: 'is_paid', header: 'Status' },
        { key: 'paid_at', header: 'Paid at' },
    ];

    // Query params for the API call
    const isPaid = 0;
    const sortBy = 'price';
    const sortOrder = 'asc';

    useEffect(() => {
        const fetchInvoices = async () => {
            try {
                const token = localStorage.getItem('token');
                if (!token) {
                  throw new Error('No authentication token found');
                }
                const response = await axios.get(`${API_ENDPOINTS.INVOICES}?is_paid=${isPaid}&sort_by=${sortBy}&sort_order=${sortOrder}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                      }
                });
                setFilteredData(response.data?.data || []);
            } catch {
                setFilteredData([]);
            }
        };
        fetchInvoices();
    }, []);

    const renderCell = (key, value) => {
        if (key === 'is_paid') {
            return value ? 'Paid' : 'Unpaid';
        }
        if (key === 'price') {
            return `Â£${parseFloat(value).toFixed(2)}`;
        }
        if (key === 'paid_at') {
            return value ? new Date(value).toLocaleDateString('en-GB') : '-';
        }
        return value;
    };

    return (
        <MainLayout 
            isInvoicePage={true}
            title="Invoices"
            filterButtons={[
                { id: '', label: 'All', dotColor: 'white' },
                { id: 'paid', label: 'Paid', dotColor: 'success' },
                { id: 'unpaid', label: 'Unpaid', dotColor: 'warning' }
            ]}
            onFilterChange={(filterId) => {
                // Filter logic here if needed
            }}
        >
            <DashboardContainer>
                <MainContent>
                    <TableContainer>
                        <InstructionsTable 
                            data={filteredData}
                            title="All Invoices"
                            subtitle="Monthly invoices generated by firm"
                            columns={columns}
                            renderCell={renderCell}
                            minHeight={495}
                            noDataCellHeight={420}
                            itemsPerPage={10}
                        />
                    </TableContainer>
                </MainContent>
            </DashboardContainer>
        </MainLayout>
    );
};

const DashboardContainer = styled.div`
  width: 100%;
  max-width: 1728px;
  margin: 0 auto;
  box-sizing: border-box;
`;

const MainContent = styled.div`
  display: flex;
  flex-direction: column;
  width: 100%;

  @media (min-width: 1280px) {
    flex-direction: row;
  }
  
  @media (max-width: 1280px) {
  gap: 24px;
}
`;

const TableContainer = styled.div`
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  width: 100%;
`;

export default InvoicesPage;
